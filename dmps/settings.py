"""
Django settings for dmps project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import sys
from pathlib import Path
from environs import Env
import colorlog

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.

env = Env()
env.read_env()

BASE_DIR = Path(__file__).resolve().parent.parent

DMPONLINE_AUTH_URL = env.str("DMPONLINE_AUTH_URL")
DMPONLINE_API_V0_URL = env.str("DMPONLINE_API_V0_URL")
DMPONLINE_API_V1_URL = env("DMPONLINE_API_V1_URL")
DMPONLINE_TOKEN = env.str("DMPONLINE_TOKEN")
DMPONLINE_USER_EMAIL = env.str("DMPONLINE_USER_EMAIL")
DMPONLINE_VERIFY = env.str(
    "DMPONLINE_VERIFY"
)  # on purpose not as boolean, because it also can be a file path
AVG_REGISTRY_URL = env.str("AVG_REGISTRY_URL")
AVG_REGISTRY_TOKEN = env.str("AVG_REGISTRY_TOKEN")
PARSE_TEST_PLANS = env.bool("PARSE_TEST_PLANS")
ESB_TOKEN = env.str("ESB_TOKEN")
ESB_URL = env.str("ESB_URL")
ESB_VERIFY = env.str(
    "ESB_VERIFY"
)  # on purpose not as boolean, because it also can be a file path

SHAREPOINT_URL = env.str("SHAREPOINT_URL")
SHAREPOINT_USERNAME = env.str("SHAREPOINT_USERNAME")
SHAREPOINT_PASSWORD = env.str("SHAREPOINT_PASSWORD")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "stats.apps.StatsConfig",
    "colorlog",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "dmps.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


""""""

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} [{module}] [{name}]: {message}",  # {process:d} {thread:d}
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s %(levelname)-8s %(asctime)s "
            "%(module)s %(reset)s %(white)s%(message)s",
        },
    },
    "handlers": {
        "log_to_stdout": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "colored",
        },
    },
    "loggers": {
        "main": {
            "handlers": ["log_to_stdout"],
            "level": "DEBUG",
            "propagate": True,
        },
        "mappings": {
            "handlers": ["log_to_stdout"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


WSGI_APPLICATION = "dmps.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_L10N = True

EMAIL_HOST = env.str("EMAIL_HOST")
# EMAIL_PORT = 465  # SSL
EMAIL_PORT = env.int("EMAIL_PORT")  # TLS
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS")
# EMAIL_USE_SSL = True
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = env.str("EMAIL_HOST_USER")
SERVER_EMAIL = env.str("EMAIL_HOST_USER")
DEFAULT_RECIPIENT = env.str("DEFAULT_RECIPIENT")

USE_TZ = True

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
